package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;

import com.example.restservicedemo.domain.Jedzenie;

public class JedzenieManager {
	
	private Connection connection;
	
	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	
	private static final String CREATE_TABLE_JEDZENIE = "CREATE TABLE Jedzenie(id bigint GENERATED BY DEFAULT AS IDENTITY, nazwa varchar(20), rodzaj varchar(20), rokProdukcji integer)";

	private PreparedStatement addJedzenieStmt;
	private PreparedStatement deleteAllJedzenieStmt;
	private PreparedStatement getAllJedzenieStmt;
	private PreparedStatement getJedzenieByIdStmt;
	private PreparedStatement deleteJedzenieStmt;
	private PreparedStatement updateJedzenieStmt;
	private PreparedStatement getJedzenieByNazwaStmt;
	private Statement statement;
	
	public JedzenieManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();
			
			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			
			while (rs.next()) {
				if ("Jedzenie".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_JEDZENIE);

			addJedzenieStmt = connection
					.prepareStatement("INSERT INTO Jedzenie (id, nazwa, rodzaj, rokProdukcji) VALUES (?, ?, ?, ?)");
			deleteAllJedzenieStmt = connection
					.prepareStatement("DELETE FROM Jedzenie");
			getAllJedzenieStmt = connection
					.prepareStatement("SELECT id, nazwa, rodzaj, rokProdukcji FROM Jedzenie");
			getJedzenieByIdStmt = connection
					.prepareStatement("SELECT id, nazwa, rodzaj, rokProdukcji FROM Jedzenie where id = ?");
			deleteJedzenieStmt = connection
					.prepareStatement("DELETE FROM Jedzenie WHERE id = ?");
			updateJedzenieStmt = connection
					.prepareStatement("UPDATE Jedzenie SET nazwa = ?, rodzaj = ?,rokProdukcji = ?  WHERE id = ?");
			getJedzenieByNazwaStmt = connection
					.prepareStatement("SELECT id, nazwa, rodzaj, rokProdukcji FROM Jedzenie where nazwa = ?" );
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnnection() {
		return connection;
	}
	
	public void clearJedzenie() {
		try {
			deleteAllJedzenieStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int addJedzenie(Jedzenie jedzenie) {
		int count = 0;
		
		try {
			addJedzenieStmt.setLong(1, jedzenie.getId());
			addJedzenieStmt.setString(2, jedzenie.getNazwa());
			addJedzenieStmt.setString(3, jedzenie.getRodzaj());
			addJedzenieStmt.setInt(4, jedzenie.getRokProdukcji());
			
			count = addJedzenieStmt.executeUpdate();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return count;
	}
	public int deleteJedzenieId(Jedzenie jedzenie){
		
		int count = 0;
		try {
			
			deleteJedzenieStmt.setLong(1, jedzenie.getId());
			count = deleteJedzenieStmt.executeUpdate();
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	public int updateJedzenie(Jedzenie jedzenie){
		int count = 0;
		try{
			updateJedzenieStmt.setString(1, jedzenie.getNazwa());
			updateJedzenieStmt.setString(2, jedzenie.getRodzaj());
			updateJedzenieStmt.setInt(3, jedzenie.getRokProdukcji());
			
			count = updateJedzenieStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	
	public List<Jedzenie> getAllJedzenie() {
		List<Jedzenie> jedzenie = new ArrayList<Jedzenie>();
		
		try {
			ResultSet rs = getAllJedzenieStmt.executeQuery();
			
			while (rs.next()) {
				Jedzenie b = new Jedzenie();
				b.setId(rs.getInt("id"));
				b.setNazwa(rs.getString("nazwa"));
				b.setRodzaj(rs.getString("rodzaj"));
				b.setRokProdukcji(rs.getInt("rokProdukcji"));
				jedzenie.add(b);
			}
 		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return jedzenie;
	}
	
	public Jedzenie getJedzenie(Long id) {
		Jedzenie b = new Jedzenie();
		
		try {
			getJedzenieByIdStmt.setLong(1, id);
			ResultSet rs = getJedzenieByIdStmt.executeQuery();
			
			while (rs.next()) {
				b.setId(rs.getInt("id"));
				b.setNazwa(rs.getString("nazwa"));
				b.setRodzaj(rs.getString("rodzaj"));
				b.setRokProdukcji(rs.getInt("rokProdukcji"));
				break;
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return b;
	}
	public List<Jedzenie> getJedzenieByNazwa(String nazwa) {
		List<Jedzenie> jedzenie = new ArrayList<Jedzenie>();
		
		try {
			getJedzenieByNazwaStmt.setString(1, nazwa);
			ResultSet rs = getJedzenieByNazwaStmt.executeQuery();
			
			while (rs.next()) {
				Jedzenie b = new Jedzenie();
				b.setId(rs.getInt("id"));
				b.setNazwa(rs.getString("nazwa"));
				b.setRodzaj(rs.getString("rodzaj"));
				b.setRokProdukcji(rs.getInt("rokProdukcji"));
				jedzenie.add(b);
			}
 		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return jedzenie;
	}
}
/*@PUT
@Path("/update/{id}/{nazwa}")
public Response updateJedzenie(@PathParam("id") Long id, @PathParam("nazwa") String nazwa) {
	jm.updateJedzenie(nazwa, id);
	return Response.status(200).build();
}*/
